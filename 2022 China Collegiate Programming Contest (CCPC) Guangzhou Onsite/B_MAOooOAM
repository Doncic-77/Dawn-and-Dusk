#include <bits/stdc++.h>

#define ff first
#define ss second

#define typet typename T
#define typeu typename U
#define types typename... Ts
#define tempt template < typet >
#define tempu template < typeu >
#define temps template < types >
#define tandu template < typet , typeu >
#define tands template < typet , types >

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...) do { } while (false)
#endif // LOCAL

using i64 = int64_t;
using pii = std::pair<int, int>;
using vi = std::vector<int>;
using vl = std::vector<i64>;
using vs = std::vector<std::string>;
using vvi = std::vector<vi>;
tempt using heap = std::priority_queue<T, std::vector<T>, std::greater<T>>;

#define lowbit(x) ((x) & -(x))
#define all(x)    std::begin(x), std::end(x)

tandu bool Min(T& x, const U& y) { return x > y ? x = y, true : false; }
tandu bool Max(T& x, const U& y) { return x < y ? x = y, true : false; }

constexpr int mod = 998244353;
constexpr int add(int x, int y) { return x + y < mod ? x + y : x + y - mod; }
constexpr int sub(int x, int y) { return x < y ? mod + x - y : x - y; }
constexpr int mul(i64 x, int y) { return x * y % mod; }
constexpr void Add(int& x, int y) { x = add(x, y); }
constexpr void Sub(int& x, int y) { x = sub(x, y); }
constexpr void Mul(int& x, int y) { x = mul(x, y); }
constexpr int pow(int x, int y, int z = 1) {
  for (; y; y /= 2) {
    if (y & 1) Mul(z, x);
    Mul(x, x);
  }
  return z;
}

void initialize() {
  std::cin.tie(nullptr) -> sync_with_stdio(false);
  std::cout << std::fixed << std::setprecision(10);
}

int cas;

constexpr int maxn = 500005;

int a[maxn];
i64 sum1[maxn * 2], tag1[maxn * 2], sum2[maxn * 2], tag2[maxn * 2];

int p[maxn * 2];
i64 ans[maxn];

int id(int l, int r) { return (l + r) | (l != r); }

void push(int l, int m, int r) {
  int i = id(l, r), ls = id(l, m), rs = id(m + 1, r);
  sum1[ls] += tag1[i] * (m - l + 1);
  sum1[rs] += tag1[i] * (r - m);
  tag1[ls] += tag1[i];
  tag1[rs] += tag1[i];
  tag1[i] = 0;
  sum2[ls] += tag2[i] * (m - l + 1);
  sum2[rs] += tag2[i] * (r - m);
  tag2[ls] += tag2[i];
  tag2[rs] += tag2[i];
  tag2[i] = 0;
  if (p[i]) {
    p[ls] = p[rs] = p[i];
  }
}

void pull(int l, int m, int r) {
  int i = id(l, r), ls = id(l, m), rs = id(m + 1, r);
  sum1[i] = sum1[ls] + sum1[rs];
  sum2[i] = sum2[ls] + sum2[rs];
  p[i] = p[ls] == p[rs] ? p[ls] : 0;
}

void build(int l, int r) {
  if (l == r) {
    p[id(l, r)] = a[l];
    return;
  }
  int m = (l + r) / 2;
  build(l, m);
  build(m + 1, r);
  pull(l, m, r);
}

void update1(int l, int r, int ql, int qr, int w, int t) {
  if (l > qr or r < ql) {
    return;
  }
  int i = id(l, r);
  if (l >= ql and r <= qr and p[i]) {
    ans[p[i]] += sum1[i] * t - sum2[i];
    p[i] = w;
    ans[p[i]] -= sum1[i] * t - sum2[i];
    return;
  }
  int m = (l + r) / 2;
  push(l, m, r);
  update1(l, m, ql, qr, w, t);
  update1(m + 1, r, ql, qr, w, t);
  pull(l, m, r);
}

void update2(int l, int r, int ql, int qr, i64 w1, i64 w2) {
  if (l > qr or r < ql) {
    return;
  }
  int i = id(l, r);
  if (l >= ql and r <= qr) {
    sum1[i] += w1 * (r - l + 1);
    tag1[i] += w1;
    sum2[i] += w2 * (r - l + 1);
    tag2[i] += w2;
    return;
  }
  int m = (l + r) / 2;
  push(l, m, r);
  update2(l, m, ql, qr, w1, w2);
  update2(m + 1, r, ql, qr, w1, w2);
  pull(l, m, r);
}

void solution() {
  int n, q;
  std::cin >> n >> q;
  for (int i = 1; i <= n; ++i) {
    std::cin >> a[i];
  }
  build(1, n);
  for (int i = 1; i <= q; ++i) {
    int t, l, r, w;
    std::cin >> t >> l >> r >> w;
    if (t == 1) {
      update1(1, n, l, r, w, i);
    } else {
      update2(1, n, l, r, w, static_cast<i64>(w) * i);
    }
  }
  update1(1, n, 1, n, 0, q + 1);
  for (int i = 1; i <= n; ++i) {
    std::cout << static_cast<uint64_t>(ans[i]) << " \n"[i == n];
  }
}

int main() {
  initialize();
  int T = 1;
  // std::cin >> T;
  for (cas = 1; cas <= T; ++cas) solution();
  return 0;
}
